name: Deploy HandyWriterz

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install

    - name: Create .env file
      run: |
        cat > .env.production << EOL
        # Application Settings
        VITE_APP_NAME=HandyWriterz
        VITE_APP_URL=${{ secrets.APP_URL }}
        VITE_APP_ENV=production
        VITE_APP_DESCRIPTION=Professional academic writing services
        VITE_API_URL=${{ secrets.API_URL }}
        VITE_ADMIN_URL=${{ secrets.ADMIN_URL }}
        VITE_ACCOUNTS_URL=${{ secrets.ACCOUNTS_URL }}

        # Clerk Authentication
        VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        VITE_CLERK_SIGN_IN_URL=${{ secrets.ACCOUNTS_URL }}/sign-in
        VITE_CLERK_SIGN_UP_URL=${{ secrets.ACCOUNTS_URL }}/sign-up
        VITE_CLERK_AFTER_SIGN_IN_URL=/admin
        VITE_CLERK_AFTER_SIGN_UP_URL=/admin

        # Supabase Configuration
        VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}

        # Appwrite Configuration
        VITE_APPWRITE_ENDPOINT_PROD=${{ secrets.APPWRITE_ENDPOINT }}
        VITE_APPWRITE_PROJECT_ID_PROD=${{ secrets.APPWRITE_PROJECT_ID }}
        VITE_APPWRITE_DATABASE_ID_PROD=${{ secrets.APPWRITE_DATABASE_ID }}
        VITE_APPWRITE_API_KEY_PROD=${{ secrets.APPWRITE_API_KEY }}
        VITE_APPWRITE_STORAGE_BUCKET_PROD=${{ secrets.APPWRITE_STORAGE_BUCKET }}
        VITE_APPWRITE_DOCUMENTS_BUCKET_PROD=${{ secrets.APPWRITE_DOCUMENTS_BUCKET }}
        VITE_APPWRITE_AVATARS_BUCKET_PROD=${{ secrets.APPWRITE_AVATARS_BUCKET }}
        
        # Payment Integration
        VITE_COINBASE_COMMERCE_API_KEY=${{ secrets.COINBASE_COMMERCE_API_KEY }}
        VITE_COINBASE_PUBLIC_KEY=${{ secrets.COINBASE_PUBLIC_KEY }}
        VITE_COINBASE_COMMERCE_WEBHOOK_SECRET=${{ secrets.COINBASE_COMMERCE_WEBHOOK_SECRET }}
        VITE_PUBLIC_ONCHAINKIT_API_KEY=${{ secrets.PUBLIC_ONCHAINKIT_API_KEY }}
        
        # Telegram Configuration
        VITE_TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        VITE_TELEGRAM_CHANNEL_ID=${{ secrets.TELEGRAM_CHANNEL_ID }}
        EOL

    - name: Build
      run: pnpm build

    # Optional: Run tests if available
    # - name: Test
    #   run: pnpm test

    # Create necessary deployment files
    - name: Create deployment files
      run: |
        # Create Netlify _redirects file
        echo "/* /index.html 200" > dist/_redirects
        
        # Create Vercel config
        cat > vercel.json << EOL
        {
          "version": 2,
          "routes": [
            {
              "src": "^/assets/(.*)",
              "headers": { "cache-control": "public, max-age=31536000, immutable" },
              "dest": "/assets/$1"
            },
            { "src": "^/favicon.ico", "dest": "/favicon.ico" },
            { "src": "^/robots.txt", "dest": "/robots.txt" },
            { "src": "^/sitemap.xml", "dest": "/sitemap.xml" },
            { "src": "^/(.*)", "dest": "/index.html" }
          ],
          "github": {
            "silent": true
          }
        }
        EOL

    # Deploy to Vercel (if using Vercel)
    # Uncomment and configure this section if using Vercel
    # - name: Deploy to Vercel
    #   uses: amondnet/vercel-action@v20
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
    #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
    #     working-directory: ./dist
    #     vercel-args: '--prod'

    # Deploy to Netlify (if using Netlify)
    # Uncomment and configure this section if using Netlify
    # - name: Deploy to Netlify
    #   uses: nwtgck/actions-netlify@v1.2
    #   with:
    #     publish-dir: './dist'
    #     production-branch: main
    #     deploy-message: "Deploy from GitHub Actions"
    #     enable-pull-request-comment: false
    #     enable-commit-comment: false
    #     overwrites-pull-request-comment: false
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    #   timeout-minutes: 10

    # Upload artifacts (useful for self-hosted deployments)
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-production
        path: dist/
        retention-days: 5
        
    # Setup Appwrite and other backend services
    # Note: This is commented out as it requires more complex configuration
    # - name: Setup backend services
    #   if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    #   run: |
    #     # Set up Appwrite collections and buckets
    #     pnpm run setup-appwrite-db-ultimate
    #     pnpm run create-final-collections
    #     pnpm run setup-appwrite-storage
    #     pnpm run create-buckets

    # Notify on success
    - name: Notify on success
      if: success()
      run: |
        echo "::notice::Deployment was successful! Artifacts have been uploaded."
        
    # Notify on failure
    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Deployment failed! Check the logs for details." 