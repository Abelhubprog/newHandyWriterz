import React, { useEffect, useMemo, useRef, useState } from "react";
// NOTE: This file is a drop-in replacement for @adult-health-nursing.tsx
// It preserves your mocked/hardcoded data approach but upgrades the UX and
// adds lightweight admin tools to post articles and create new sub-page links.
// The code is intentionally self-contained (no heavy refactor, no new deps).

// --- Icons (lucide-react). If lucide-react is not present, replace with inline SVGs.
import {
  Calendar,
  Clock,
  Heart,
  MessageCircle,
  Search,
  Filter,
  LayoutGrid,
  LayoutList,
  Bookmark,
  Share2,
  ChevronRight,
  ChevronLeft,
  Loader2,
  Tag,
  Plus,
  X,
} from "lucide-react";

// ---------------------------------------------------------------------------
// Types
// ---------------------------------------------------------------------------

type Author = {
  id: string;
  name: string;
  avatar: string;
  role?: string;
};

type Post = {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  content: string; // HTML string
  author: Author;
  category: string;
  tags: string[];
  publishedAt: string; // ISO
  readTime: number; // minutes
  featuredImage: string;
  likes: number;
  comments: number;
  userHasLiked?: boolean;
  mediaType?: "image" | "video" | "audio";
  mediaUrl?: string;
};

type Category = {
  id: string;
  name: string;
  count: number;
};

type MiniPage = { title: string; slug: string; blurb: string; icon?: string };

// ---------------------------------------------------------------------------
// Utilities
// ---------------------------------------------------------------------------

const cx = (...xs: (string | false | null | undefined)[]) =>
  xs.filter(Boolean).join(" ");

const formatDate = (iso: string) =>
  new Date(iso).toLocaleDateString(undefined, {
    year: "numeric",
    month: "long",
    day: "numeric",
  });

const clamp = (n: number, min = 0, max = 100) => Math.max(min, Math.min(max, n));

const useReadingProgress = () => {
  const [progress, setProgress] = useState(0);
  useEffect(() => {
    const onScroll = () => {
      const el = document.documentElement;
      const body = document.body;
      const top = el.scrollTop || body.scrollTop;
      const height = (el.scrollHeight || body.scrollHeight) - el.clientHeight;
      setProgress(height ? clamp(Math.round((top / height) * 100)) : 0);
    };
    onScroll();
    window.addEventListener("scroll", onScroll, { passive: true });
    return () => window.removeEventListener("scroll", onScroll);
  }, []);
  return progress;
};

// Light-touch content renderer with TOC + image lightbox + code styling
const Prose = ({
  html,
  onHeadings,
}: {
  html: string;
  onHeadings?: (hs: { id: string; text: string; level: number }[]) => void;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (!ref.current) return;
    const root = ref.current;

    // Collect headings
    const hs: { id: string; text: string; level: number }[] = [];
    root.querySelectorAll("h2, h3").forEach((el, i) => {
      const txt = el.textContent || `section-${i + 1}`;
      const id = txt
        .toLowerCase()
        .replace(/[^\w\s-]/g, "")
        .trim()
        .replace(/\s+/g, "-");
      el.setAttribute("id", id);
      hs.push({ id, text: txt, level: el.tagName === "H2" ? 2 : 3 });
    });
    onHeadings?.(hs);

    // Simple lightbox for images
    root.querySelectorAll<HTMLImageElement>("img").forEach((img) => {
      img.classList.add("cursor-zoom-in");
      const handler = () => {
        const overlay = document.createElement("div");
        overlay.className =
          "fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4";
        overlay.addEventListener("click", () => overlay.remove());
        const big = document.createElement("img");
        big.src = img.src;
        big.alt = img.alt;
        big.className = "max-h-[90vh] max-w-[90vw] rounded-xl shadow-2xl";
        overlay.appendChild(big);
        document.body.appendChild(overlay);
      };
      img.addEventListener("click", handler);
      return () => img.removeEventListener("click", handler);
    });
  }, [html, onHeadings]);

  return (
    <div
      ref={ref}
      className={cx(
        "prose prose-lg max-w-none",
        // code blocks
        "prose-pre:bg-gray-900 prose-pre:text-gray-100 prose-pre:rounded-xl prose-pre:p-4",
        "prose-code:bg-gray-100 prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded",
        // images & links
        "prose-img:rounded-xl prose-img:shadow",
        "prose-a:text-red-600 hover:prose-a:underline",
        // headings scroll margin for anchor jumping under sticky header
        "prose-h2:scroll-mt-28 prose-h3:scroll-mt-28"
      )}
      dangerouslySetInnerHTML={{ __html: html }}
    />
  );
};

const MediaHeader = ({ post }: { post: Post }) => {
  if (post.mediaType === "video" && post.mediaUrl) {
    return (
      <div className="mb-10 rounded-xl overflow-hidden shadow-lg relative aspect-video bg-black">
        <video className="w-full h-full" controls poster={post.featuredImage}>
          <source src={post.mediaUrl} />
        </video>
      </div>
    );
  }
  if (post.mediaType === "audio" && post.mediaUrl) {
    return (
      <div className="mb-10 rounded-xl overflow-hidden shadow-lg p-6 bg-gradient-to-r from-red-500 to-red-700">
        <audio className="w-full" controls src={post.mediaUrl} />
      </div>
    );
  }
  return (
    <div className="mb-10 rounded-xl overflow-hidden shadow-lg">
      <img src={post.featuredImage} alt={post.title} className="w-full h-auto" />
    </div>
  );
};

// ---------------------------------------------------------------------------
// Mocked Data (kept close to what you already had; feel free to inject yours)
// ---------------------------------------------------------------------------

const DR_SARAH: Author = {
  id: "sarah",
  name: "Dr. Sarah Johnson",
  avatar: "/api/placeholder/48/48",
  role: "Senior Nursing Consultant",
};

const CATEGORIES: Category[] = [
  { id: "all", name: "All Categories", count: 18 },
  { id: "Clinical Practice", name: "Clinical Practice", count: 12 },
  { id: "Research", name: "Research", count: 10 },
  { id: "Education", name: "Education", count: 6 },
  { id: "Management", name: "Management", count: 4 },
  { id: "Ethics", name: "Ethics", count: 4 },
];

const SAMPLE_HTML = `
  <p>Adult health nursing requires a comprehensive understanding of both theoretical principles and practical applications. This article explores evidence-based approaches that have been proven most effective in clinical settings.</p>
  <h2>Assessment and Planning</h2>
  <p>Use systematic assessment frameworks to identify patient needs and prioritize interventions.</p>
  <pre><code class="language-ts">// Example: SBAR handover template
const handover = {
  situation: "Mr. K with chest pain, 20 minutes duration",
  background: "Hypertension, smoker, no known allergies",
  assessment: "BP 168/100, HR 104, pain score 8/10",
  recommendation: "Start MONA, request ECG, inform on-call registrar",
};
</code></pre>
  <h3>Monitoring & Escalation</h3>
  <p>Use NEWS2 thresholds to guide escalation. Document clearly and communicate early.</p>
  <img src="/api/placeholder/1200/600" alt="chart"/>
`;

const MOCK_POSTS: Post[] = [
  {
    id: "p-1",
    title: "Evidence-Based Practice in Adult Nursing: A Comprehensive Guide",
    slug: "evidence-based-practice-adult-nursing",
    excerpt:
      "This comprehensive guide explores the latest research and best practices in adult health nursing, providing actionable insights to enhance patient outcomes.",
    content: SAMPLE_HTML,
    author: DR_SARAH,
    category: "Management",
    tags: ["evidence-based", "nursing", "adult-health", "clinical-skills"],
    publishedAt: "2025-08-23T00:00:00.000Z",
    readTime: 12,
    featuredImage: "/api/placeholder/1200/650",
    likes: 3,
    comments: 5,
    mediaType: "image",
  },
  {
    id: "p-2",
    title: "Managing Chronic Conditions in Adult Patients: Latest Approaches",
    slug: "managing-chronic-conditions-adult-patients",
    excerpt:
      "Exploring evidence-based interventions for managing chronic conditions with multidisciplinary collaboration.",
    content: SAMPLE_HTML,
    author: DR_SARAH,
    category: "Research",
    tags: ["research", "adult-health"],
    publishedAt: "2025-08-23T00:00:00.000Z",
    readTime: 23,
    featuredImage: "/api/placeholder/1200/650",
    likes: 49,
    comments: 1,
    mediaType: "video",
    mediaUrl: "/media/sample-video.mp4",
  },
  {
    id: "p-3",
    title: "Cardiovascular Care Advances: What Every Nurse Should Know",
    slug: "cardiovascular-care-advances",
    excerpt:
      "Latest advances in cardiovascular nursing, monitoring, and patient education for secondary prevention.",
    content: SAMPLE_HTML,
    author: DR_SARAH,
    category: "Clinical Practice",
    tags: ["cardio", "practice"],
    publishedAt: "2025-08-23T00:00:00.000Z",
    readTime: 9,
    featuredImage: "/api/placeholder/1200/650",
    likes: 44,
    comments: 5,
  },
  {
    id: "p-4",
    title: "Diabetes Management Protocols for Adult Health Nurses",
    slug: "diabetes-management-protocols",
    excerpt:
      "Structured diabetes care protocols, medication safety, and patient self-management support.",
    content: SAMPLE_HTML,
    author: DR_SARAH,
    category: "Ethics",
    tags: ["diabetes", "protocols"],
    publishedAt: "2025-08-23T00:00:00.000Z",
    readTime: 17,
    featuredImage: "/api/placeholder/1200/650",
    likes: 17,
    comments: 8,
  },
];

// ---------------------------------------------------------------------------
// Mini persistence helpers (graceful fallback to localStorage)
// ---------------------------------------------------------------------------

const tryPersist = async (payload: any, kind: "post" | "page") => {
  try {
    // Example backends (replace with your real client calls if available)
    // @ts-ignore
    if (typeof supabase !== "undefined" && supabase?.from) {
      if (kind === "post") {
        // @ts-ignore
        await supabase.from("posts").insert(payload);
      } else {
        // @ts-ignore
        await supabase.from("pages").insert(payload);
      }
      return;
    }
    // @ts-ignore (Cloudflare D1 pseudo)
    if (typeof d1Client !== "undefined" && d1Client?.exec) {
      if (kind === "post") {
        // @ts-ignore
        await d1Client.exec("INSERT INTO posts (title, content) VALUES (?1, ?2)", [
          payload.title,
          payload.content,
        ]);
      } else {
        // @ts-ignore
        await d1Client.exec("INSERT INTO pages (title, slug, blurb) VALUES (?1, ?2, ?3)", [
          payload.title,
          payload.slug,
          payload.blurb,
        ]);
      }
      return;
    }
    throw new Error("no backend");
  } catch (err) {
    // local fallback
    if (kind === "post") {
      const local = JSON.parse(localStorage.getItem("ahn-local-posts") || "[]");
      local.unshift(payload);
      localStorage.setItem("ahn-local-posts", JSON.stringify(local));
    } else {
      const local = JSON.parse(localStorage.getItem("ahn-mini-pages") || "[]");
      local.unshift(payload);
      localStorage.setItem("ahn-mini-pages", JSON.stringify(local));
    }
  }
};

// ---------------------------------------------------------------------------
// UI atoms
// ---------------------------------------------------------------------------

const Pill = ({ children, className = "" }: { children: React.ReactNode; className?: string }) => (
  <span
    className={cx(
      "inline-flex items-center px-2.5 py-1 rounded-full text-[11px] font-semibold uppercase tracking-wide",
      "bg-white/90 text-red-600 ring-1 ring-white/60 shadow-sm",
      className
    )}
  >
    {children}
  </span>
);

const Stat = ({ icon, children }: { icon: React.ReactNode; children: React.ReactNode }) => (
  <div className="inline-flex items-center gap-1.5 text-sm text-gray-600">
    {icon}
    <span>{children}</span>
  </div>
);

const Card = ({ children, className = "" }: { children: React.ReactNode; className?: string }) => (
  <div
    className={cx(
      "bg-white border border-gray-100 rounded-2xl overflow-hidden shadow-sm",
      "hover:shadow-lg hover:-translate-y-0.5 transition-all",
      className
    )}
  >
    {children}
  </div>
);

// ---------------------------------------------------------------------------
// Admin Modals
// ---------------------------------------------------------------------------

const NewArticleModal = ({
  open,
  onClose,
  onCreate,
  categories,
  currentUser,
}: {
  open: boolean;
  onClose: () => void;
  onCreate: (p: Post) => void;
  categories: Category[];
  currentUser?: { id?: string; displayName?: string; photoURL?: string } | null;
}) => {
  const [form, setForm] = useState({
    title: "",
    category: categories[1]?.name || "Clinical Practice",
    tags: "nursing,adult-health",
    featuredImage: "",
    mediaType: "image",
    mediaUrl: "",
    excerpt: "",
    content: SAMPLE_HTML,
  });

  if (!open) return null;

  const save = async () => {
    const post: Post = {
      id: `local-${Date.now()}`,
      title: form.title || "Untitled",
      slug: (form.title || "untitled")
        .toLowerCase()
        .replace(/[^\w\s-]/g, "")
        .replace(/\s+/g, "-"),
      excerpt: form.excerpt,
      content: form.content,
      author: {
        id: currentUser?.id || "local",
        name: currentUser?.displayName || "Admin",
        avatar: currentUser?.photoURL || "/api/placeholder/40/40",
        role: "Admin",
      },
      category: form.category,
      tags: form.tags
        .split(",")
        .map((s) => s.trim())
        .filter(Boolean),
      publishedAt: new Date().toISOString(),
      readTime: Math.max(
        1,
        Math.ceil(form.content.replace(/<[^>]+>/g, "").split(/\s+/).length / 200)
      ),
      featuredImage: form.featuredImage || "/api/placeholder/1200/650",
      likes: 0,
      comments: 0,
      userHasLiked: false,
      mediaType: form.mediaType as any,
      mediaUrl: form.mediaUrl || undefined,
    };

    onCreate(post);
    await tryPersist(post, "post");
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">
      <div className="w-full max-w-3xl bg-white rounded-2xl shadow-xl overflow-hidden">
        <div className="p-4 border-b flex items-center justify-between">
          <div className="font-semibold">New Article</div>
          <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded">
            <X size={18} />
          </button>
        </div>
        <div className="p-4 space-y-3 max-h-[70vh] overflow-y-auto">
          <input
            className="w-full border rounded-lg px-3 py-2"
            placeholder="Title"
            value={form.title}
            onChange={(e) => setForm({ ...form, title: e.target.value })}
          />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <input
              className="border rounded-lg px-3 py-2"
              placeholder="Featured image URL"
              value={form.featuredImage}
              onChange={(e) => setForm({ ...form, featuredImage: e.target.value })}
            />
            <select
              className="border rounded-lg px-3 py-2"
              value={form.category}
              onChange={(e) => setForm({ ...form, category: e.target.value })}
            >
              {categories.map((c) => (
                <option key={c.id} value={c.name}>
                  {c.name}
                </option>
              ))}
            </select>
            <select
              className="border rounded-lg px-3 py-2"
              value={form.mediaType}
              onChange={(e) => setForm({ ...form, mediaType: e.target.value })}
            >
              <option value="image">Image</option>
              <option value="video">Video</option>
              <option value="audio">Audio</option>
            </select>
            <input
              className="border rounded-lg px-3 py-2"
              placeholder="Media URL (optional)"
              value={form.mediaUrl}
              onChange={(e) => setForm({ ...form, mediaUrl: e.target.value })}
            />
            <input
              className="border rounded-lg px-3 py-2 md:col-span-2"
              placeholder="Tags (comma separated)"
              value={form.tags}
              onChange={(e) => setForm({ ...form, tags: e.target.value })}
            />
          </div>
          <textarea
            className="w-full border rounded-lg px-3 py-2"
            rows={3}
            placeholder="Short excerpt"
            value={form.excerpt}
            onChange={(e) => setForm({ ...form, excerpt: e.target.value })}
          />
          <textarea
            className="w-full border rounded-lg px-3 py-2 font-mono"
            rows={10}
            placeholder="HTML content"
            value={form.content}
            onChange={(e) => setForm({ ...form, content: e.target.value })}
          />
        </div>
        <div className="p-4 border-t flex justify-end gap-2">
          <button onClick={onClose} className="px-4 py-2 rounded-lg border">
            Cancel
          </button>
          <button
            onClick={save}
            className="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700"
          >
            Publish
          </button>
        </div>
      </div>
    </div>
  );
};

const NewPageModal = ({
  open,
  onClose,
  onCreate,
}: {
  open: boolean;
  onClose: () => void;
  onCreate: (p: MiniPage) => void;
}) => {
  const [form, setForm] = useState({ title: "", blurb: "" });
  if (!open) return null;

  const save = async () => {
    const p: MiniPage = {
      title: form.title || "Untitled",
      slug: (form.title || "untitled")
        .toLowerCase()
        .replace(/[^\w\s-]/g, "")
        .replace(/\s+/g, "-"),
      blurb: form.blurb,
    };
    onCreate(p);
    await tryPersist(p, "page");
    onClose();
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4">
      <div className="w-full max-w-xl bg-white rounded-2xl shadow-xl overflow-hidden">
        <div className="p-4 border-b flex items-center justify-between">
          <div className="font-semibold">New Link/Page</div>
          <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded">
            <X size={18} />
          </button>
        </div>
        <div className="p-4 space-y-3">
          <input
            className="w-full border rounded-lg px-3 py-2"
            placeholder="Title"
            value={form.title}
            onChange={(e) => setForm({ ...form, title: e.target.value })}
          />
          <textarea
            className="w-full border rounded-lg px-3 py-2"
            rows={4}
            placeholder="Short blurb"
            value={form.blurb}
            onChange={(e) => setForm({ ...form, blurb: e.target.value })}
          />
        </div>
        <div className="p-4 border-t flex justify-end gap-2">
          <button onClick={onClose} className="px-4 py-2 rounded-lg border">
            Cancel
          </button>
          <button
            onClick={save}
            className="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700"
          >
            Create
          </button>
        </div>
      </div>
    </div>
  );
};

// ---------------------------------------------------------------------------
// Main Page Component
// ---------------------------------------------------------------------------

export default function AdultHealthNursingPage() {
  // user stub (replace with your auth state)
  const user = { id: "1", email: "admin@example.com", displayName: "Admin" } as
    | { id: string; email?: string; displayName?: string }
    | null;

  const isAdmin =
    (user as any)?.role === "admin" ||
    (user as any)?.isAdmin ||
    (import.meta.env.VITE_ADMIN_EMAILS || "admin@example.com")
      .split(",")
      .includes((user as any)?.email || "");

  const [posts, setPosts] = useState<Post[]>(() => {
    const local = JSON.parse(localStorage.getItem("ahn-local-posts") || "[]");
    return [...(local as Post[]), ...MOCK_POSTS];
  });

  const [filteredPosts, setFiltered] = useState<Post[]>(posts);
  const [selectedPost, setSelectedPost] = useState<Post | null>(null);
  const [category, setCategory] = useState<string>("All Categories");
  const [query, setQuery] = useState("");
  const [layout, setLayout] = useState<"grid" | "list">("grid");
  const [loadingMore, setLoadingMore] = useState(false);
  const infiniteScrollRef = useRef<HTMLDivElement | null>(null);
  const [toc, setToc] = useState<{ id: string; text: string; level: number }[]>(
    []
  );

  const [miniPages, setMiniPages] = useState<MiniPage[]>(() =>
    JSON.parse(localStorage.getItem("ahn-mini-pages") || "[]")
  );

  const [showPostModal, setShowPostModal] = useState(false);
  const [showPageModal, setShowPageModal] = useState(false);

  const progress = useReadingProgress();

  // effects
  useEffect(() => {
    const normalized = posts.filter((p) =>
      category === "All Categories" ? true : p.category === category
    );
    const q = query.trim().toLowerCase();
    const out = q
      ? normalized.filter(
          (p) =>
            p.title.toLowerCase().includes(q) ||
            p.excerpt.toLowerCase().includes(q) ||
            p.tags.join(",").toLowerCase().includes(q)
        )
      : normalized;
    setFiltered(out);
  }, [category, query, posts]);

  useEffect(() => {
    if (!infiniteScrollRef.current) return;
    const io = new IntersectionObserver(
      (entries) => {
        if (entries[0]?.isIntersecting) loadMorePosts();
      },
      { rootMargin: "600px" }
    );
    io.observe(infiniteScrollRef.current);
    return () => io.disconnect();
  }, [infiniteScrollRef.current]);

  const loadMorePosts = () => {
    if (loadingMore) return;
    setLoadingMore(true);
    setTimeout(() => {
      // duplicate mocks to simulate pagination
      setPosts((prev) => [
        ...prev,
        ...MOCK_POSTS.map((x, i) => ({
          ...x,
          id: `${x.id}-more-${prev.length + i}`,
          slug: `${x.slug}-more-${prev.length + i}`,
        })),
      ]);
      setLoadingMore(false);
    }, 800);
  };

  const selectPost = (p: Post) => {
    setSelectedPost(p);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const backToList = () => {
    setSelectedPost(null);
    setToc([]);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  // -----------------------------------------------------------------------
  // Render helpers
  // -----------------------------------------------------------------------

  const Hero = () => (
    <header className="relative isolate">
      <div className="absolute inset-0 -z-10 bg-gradient-to-b from-red-600 to-red-700" />
      <div className="container mx-auto px-4 py-12 sm:py-16">
        <h1 className="text-white text-3xl sm:text-4xl lg:text-5xl font-bold tracking-tight">
          Adult Health Nursing
        </h1>
        <div className="mt-6 flex gap-3">
          <a
            href="#articles"
            className="inline-flex items-center rounded-lg bg-white/95 text-gray-900 px-4 py-2 text-sm font-semibold shadow hover:shadow-md"
          >
            Explore Articles
          </a>
          <a
            href="#categories"
            className="inline-flex items-center rounded-lg bg-black/10 text-white px-4 py-2 text-sm font-semibold ring-1 ring-white/30 hover:bg-black/20"
          >
            Browse Categories
          </a>
        </div>
      </div>
      {/* reading progress */}
      <div className="sticky top-16 z-40 h-1 bg-transparent">
        <div
          className="h-1 bg-red-300/40"
          style={{ width: "100%" }}
        />
        <div
          className="-mt-1 h-1 bg-white"
          style={{ width: `${progress}%` }}
        />
      </div>
    </header>
  );

  const Featured = () => (
    <section className="container mx-auto px-4 py-8" id="articles">
      <h2 className="text-xl font-semibold mb-4">Featured Articles</h2>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-5">
        {/* Big feature card */}
        {filteredPosts[0] && (
          <Card className="lg:col-span-2 cursor-pointer group" key={filteredPosts[0].id}>
            <div onClick={() => selectPost(filteredPosts[0])}>
              <div className="relative">
                <img
                  src={filteredPosts[0].featuredImage}
                  alt={filteredPosts[0].title}
                  className="w-full h-[240px] sm:h-[320px] object-cover"
                />
                <div className="absolute left-4 top-4">
                  <Pill>{filteredPosts[0].category}</Pill>
                </div>
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white">
                  <h3 className="text-lg sm:text-xl font-semibold">
                    {filteredPosts[0].title}
                  </h3>
                  <div className="mt-2 flex items-center gap-4 text-sm text-white/90">
                    <Stat icon={<Clock size={14} />}>{filteredPosts[0].readTime} min read</Stat>
                    <Stat icon={<Heart size={14} />}>{filteredPosts[0].likes}</Stat>
                    <Stat icon={<MessageCircle size={14} />}>{filteredPosts[0].comments}</Stat>
                  </div>
                </div>
              </div>
              <div className="p-4 text-gray-600">
                {filteredPosts[0].excerpt}
              </div>
              <div className="px-4 pb-4 flex items-center gap-3 text-sm text-gray-600">
                <img
                  src={filteredPosts[0].author.avatar}
                  alt={filteredPosts[0].author.name}
                  className="h-8 w-8 rounded-full"
                />
                <div>
                  <div className="font-medium text-gray-900">
                    {filteredPosts[0].author.name}
                  </div>
                  <div className="text-xs">{formatDate(filteredPosts[0].publishedAt)}</div>
                </div>
              </div>
            </div>
          </Card>
        )}

        {/* Two side cards */}
        <div className="grid grid-cols-1 gap-5">
          {filteredPosts.slice(1, 3).map((p) => (
            <Card key={p.id} className="cursor-pointer" onClick={() => selectPost(p)}>
              <div className="relative">
                <img
                  src={p.featuredImage}
                  alt={p.title}
                  className="w-full h-[150px] object-cover"
                />
                <div className="absolute left-3 top-3">
                  <Pill>{p.category}</Pill>
                </div>
              </div>
              <div className="p-4">
                <h3 className="font-semibold line-clamp-2">{p.title}</h3>
                <div className="mt-2 text-sm text-gray-600 line-clamp-2">{p.excerpt}</div>
                <div className="mt-3 flex items-center justify-between text-xs text-gray-600">
                  <div className="flex items-center gap-3">
                    <Stat icon={<Clock size={14} />}>{p.readTime} min</Stat>
                    <Stat icon={<Heart size={14} />}>{p.likes}</Stat>
                    <Stat icon={<MessageCircle size={14} />}>{p.comments}</Stat>
                  </div>
                  <span>{formatDate(p.publishedAt)}</span>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </div>
    </section>
  );

  const QuickLinks = () => (
    <section className="container mx-auto px-4">
      {miniPages.length > 0 && (
        <div className="mb-6">
          <div className="text-sm font-semibold mb-2">Quick Links</div>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {miniPages.map((p) => (
              <a
                key={p.slug}
                href={`#${p.slug}`}
                className="group rounded-xl border border-gray-200 bg-white p-4 hover:shadow-md transition"
                title={p.title}
              >
                <div className="text-sm font-semibold group-hover:text-red-600">
                  {p.title}
                </div>
                <div className="text-xs text-gray-600 mt-1 line-clamp-2">
                  {p.blurb}
                </div>
              </a>
            ))}
          </div>
        </div>
      )}
    </section>
  );

  const Controls = () => (
    <section className="container mx-auto px-4 py-4">
      <div className="flex flex-col sm:flex-row gap-3 sm:items-center sm:justify-between">
        <div className="flex items-center gap-2">
          <div className="relative">
            <Filter className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={16} />
            <select
              className="appearance-none pl-8 pr-8 py-2 rounded-lg border bg-white text-sm"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            >
              {CATEGORIES.map((c) => (
                <option key={c.id} value={c.name}>
                  {c.name}
                </option>
              ))}
            </select>
          </div>
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={16} />
            <input
              className="pl-9 pr-3 py-2 rounded-lg border bg-white text-sm w-64"
              placeholder="Search articles..."
              value={query}
              onChange={(e) => setQuery(e.target.value)}
            />
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setLayout("grid")}
            className={cx(
              "p-2 rounded-lg border",
              layout === "grid" ? "bg-gray-100" : "bg-white"
            )}
            title="Grid"
          >
            <LayoutGrid size={16} />
          </button>
          <button
            onClick={() => setLayout("list")}
            className={cx(
              "p-2 rounded-lg border",
              layout === "list" ? "bg-gray-100" : "bg-white"
            )}
            title="List"
          >
            <LayoutList size={16} />
          </button>
        </div>
      </div>
    </section>
  );

  const Sidebar = () => (
    <aside className="space-y-6">
      <Card>
        <div className="p-4 border-b" id="categories">
          <div className="font-semibold">Categories</div>
        </div>
        <div className="p-4 space-y-2">
          {CATEGORIES.map((c) => (
            <button
              key={c.id}
              onClick={() => setCategory(c.name)}
              className={cx(
                "w-full flex items-center justify-between text-left text-sm px-3 py-2 rounded-lg",
                category === c.name ? "bg-red-50 text-red-700" : "hover:bg-gray-50"
              )}
            >
              <span>{c.name}</span>
              <span className="text-xs text-gray-500">{c.count}</span>
            </button>
          ))}
        </div>
      </Card>

      <Card>
        <div className="p-4 border-b">
          <div className="font-semibold">Popular Tags</div>
        </div>
        <div className="p-4 flex flex-wrap gap-2">
          {["evidence-based", "nursing", "adult-health", "clinical-skills", "research"].map(
            (t) => (
              <a
                key={t}
                href={`#tag-${t}`}
                className="inline-flex items-center gap-1 text-xs px-2 py-1 rounded-full border hover:bg-gray-50"
              >
                <Tag size={12} /> {t}
              </a>
            )
          )}
        </div>
      </Card>

      <Card>
        <div className="p-4 border-b">
          <div className="font-semibold">Stay Updated</div>
        </div>
        <div className="p-4 space-y-3">
          <p className="text-sm text-gray-600">
            Subscribe to our newsletter to receive the latest articles and resources.
          </p>
          <input className="w-full border rounded-lg px-3 py-2 text-sm" placeholder="Your email address" />
          <button className="w-full rounded-lg bg-red-600 text-white text-sm py-2 font-semibold hover:bg-red-700">
            Subscribe
          </button>
          <p className="text-[11px] text-gray-500">We respect your privacy. Unsubscribe anytime.</p>
        </div>
      </Card>

      <Card>
        <div className="p-4 border-b">
          <div className="font-semibold">Resources</div>
        </div>
        <div className="p-4 space-y-2 text-sm">
          <a className="block hover:underline" href="#">Free E‑Books</a>
          <a className="block hover:underline" href="#">Video Tutorials</a>
          <a className="block hover:underline" href="#">Clinical Tools</a>
        </div>
      </Card>
    </aside>
  );

  const PostCard = ({ p }: { p: Post }) => (
    <Card className="cursor-pointer" onClick={() => selectPost(p)}>
      <div className="relative">
        <img src={p.featuredImage} alt={p.title} className="w-full h-44 object-cover" />
        <div className="absolute left-3 top-3">
          <Pill>{p.category}</Pill>
        </div>
      </div>
      <div className="p-4">
        <h3 className="font-semibold line-clamp-2">{p.title}</h3>
        <div className="mt-2 text-sm text-gray-600 line-clamp-3">{p.excerpt}</div>
        <div className="mt-3 flex items-center justify-between text-xs text-gray-600">
          <div className="flex items-center gap-3">
            <Stat icon={<Clock size={14} />}>{p.readTime} min</Stat>
            <Stat icon={<Heart size={14} />}>{p.likes}</Stat>
            <Stat icon={<MessageCircle size={14} />}>{p.comments}</Stat>
          </div>
          <span>{formatDate(p.publishedAt)}</span>
        </div>
      </div>
    </Card>
  );

  const Listing = () => (
    <section className="container mx-auto px-4 py-6 grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-8">
      <div>
        {/* Grid/List switch */}
        {layout === "grid" ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {filteredPosts.map((p) => (
              <PostCard key={p.id} p={p} />
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {filteredPosts.map((p) => (
              <div key={p.id} className="flex gap-4">
                <div className="w-44 flex-shrink-0">
                  <img
                    src={p.featuredImage}
                    alt={p.title}
                    className="w-44 h-28 object-cover rounded-xl border"
                  />
                </div>
                <div className="flex-1">
                  <div className="flex items-start justify-between">
                    <h3
                      className="font-semibold hover:text-red-600 cursor-pointer"
                      onClick={() => selectPost(p)}
                    >
                      {p.title}
                    </h3>
                    <Pill>{p.category}</Pill>
                  </div>
                  <div className="text-sm text-gray-600 line-clamp-2 mt-1">{p.excerpt}</div>
                  <div className="mt-2 flex items-center gap-3 text-xs text-gray-600">
                    <Stat icon={<Clock size={14} />}>{p.readTime} min</Stat>
                    <Stat icon={<Heart size={14} />}>{p.likes}</Stat>
                    <Stat icon={<MessageCircle size={14} />}>{p.comments}</Stat>
                    <span className="ml-auto">{formatDate(p.publishedAt)}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Infinite scroll sentinel */}
        <div ref={infiniteScrollRef} className="h-10" />
        {loadingMore && (
          <div className="py-6 flex items-center justify-center text-gray-500">
            <Loader2 className="animate-spin mr-2" size={18} /> Loading more...
          </div>
        )}
      </div>

      <Sidebar />
    </section>
  );

  const TagList = ({ tags }: { tags: string[] }) => (
    <div className="flex flex-wrap gap-2">
      {tags.map((t) => (
        <span key={t} className="inline-flex items-center gap-1 text-xs px-2 py-1 rounded-full border">
          <Tag size={12} /> {t}
        </span>
      ))}
    </div>
  );

  const SinglePost = ({ p }: { p: Post }) => (
    <section className="container mx-auto px-4 py-6">
      <button
        onClick={backToList}
        className="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900"
      >
        <ChevronLeft size={16} /> Back to all articles
      </button>

      <div className="mt-6">
        <div className="flex items-center gap-3 text-sm text-gray-600">
          <Pill>{p.category}</Pill>
          <div className="flex items-center gap-2">
            <Calendar size={14} /> {formatDate(p.publishedAt)}
          </div>
          <div className="flex items-center gap-2">
            <Clock size={14} /> {p.readTime} min read
          </div>
        </div>

        <h1 className="mt-3 text-2xl sm:text-3xl font-bold tracking-tight">
          {p.title}
        </h1>

        <div className="mt-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <img src={p.author.avatar} alt={p.author.name} className="h-10 w-10 rounded-full" />
            <div className="text-sm">
              <div className="font-medium">{p.author.name}</div>
              <div className="text-gray-600">{p.author.role || "Author"}</div>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <button className="p-2 rounded-lg border hover:bg-gray-50" title="Bookmark">
              <Bookmark size={18} />
            </button>
            <button className="p-2 rounded-lg border hover:bg-gray-50" title="Share">
              <Share2 size={18} />
            </button>
          </div>
        </div>

        <MediaHeader post={p} />

        <div className="grid grid-cols-1 lg:grid-cols-[1fr_280px] gap-10">
          <div>
            <Prose html={p.content} onHeadings={(hs) => setToc(hs)} />
          </div>

          <aside className="lg:sticky lg:top-24 lg:h-fit bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
            <div className="text-sm font-semibold mb-2">On this page</div>
            {toc?.length ? (
              <nav className="space-y-1 text-sm">
                {toc.map((h) => (
                  <a
                    key={h.id}
                    href={`#${h.id}`}
                    className={cx(
                      "block truncate hover:text-red-600",
                      h.level === 3 && "pl-4 text-gray-600"
                    )}
                  >
                    {h.text}
                  </a>
                ))}
              </nav>
            ) : (
              <div className="text-gray-500 text-sm">No sections detected</div>
            )}
          </aside>
        </div>

        <div className="mt-8 flex items-center justify-between">
          <TagList tags={p.tags} />
          <div className="flex items-center gap-3 text-sm text-gray-600">
            <button
              onClick={() =>
                setPosts((xs) =>
                  xs.map((x) => (x.id === p.id ? { ...x, userHasLiked: !x.userHasLiked, likes: x.likes + (x.userHasLiked ? -1 : 1) } : x))
                )
              }
              className={cx(
                "inline-flex items-center gap-2 px-3 py-1.5 rounded-lg border",
                p.userHasLiked ? "bg-red-50 text-red-700 border-red-200" : "hover:bg-gray-50"
              )}
            >
              <Heart size={16} /> {p.likes}
            </button>
            <div className="inline-flex items-center gap-2 px-3 py-1.5 rounded-lg border">
              <MessageCircle size={16} /> {p.comments}
            </div>
          </div>
        </div>

        {/* Comments stub */}
        <Card className="mt-8">
          <div className="p-4 border-b font-semibold">Comments (1)</div>
          <div className="p-4 space-y-4">
            <div className="text-sm text-gray-600">Log in to comment</div>
            <div className="rounded-xl border p-4">
              <div className="text-sm font-medium">John Smith</div>
              <div className="text-xs text-gray-500">September 17, 2025</div>
              <p className="mt-2 text-sm text-gray-700">
                This is a really insightful article. Thank you for sharing this knowledge.
              </p>
            </div>
          </div>
        </Card>

        {/* Related */}
        <div className="mt-8">
          <div className="font-semibold mb-3">You Might Also Like</div>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {posts.slice(0, 3).map((rp) => (
              <Card key={rp.id} className="cursor-pointer" onClick={() => selectPost(rp)}>
                <img src={rp.featuredImage} className="w-full h-36 object-cover" />
                <div className="p-3">
                  <div className="text-sm font-semibold line-clamp-2">{rp.title}</div>
                  <div className="mt-1 text-xs text-gray-600 flex items-center gap-2">
                    <Clock size={12} /> {rp.readTime} min read
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </section>
  );

  // -----------------------------------------------------------------------
  // Return
  // -----------------------------------------------------------------------

  return (
    <div className="min-h-screen bg-gray-50">
      <Hero />
      <Featured />
      <QuickLinks />
      <Controls />
      {selectedPost ? <SinglePost p={selectedPost} /> : <Listing />}

      {/* Admin floating actions */}
      {isAdmin && (
        <div className="fixed bottom-6 right-6 z-50 flex gap-3">
          <button
            onClick={() => setShowPageModal(true)}
            className="px-3 py-2 rounded-lg bg-white border shadow hover:shadow-md"
          >
            <Plus size={16} className="mr-1 inline-block" /> New Link
          </button>
          <button
            onClick={() => setShowPostModal(true)}
            className="px-3 py-2 rounded-lg bg-red-600 text-white shadow hover:bg-red-700"
          >
            <Plus size={16} className="mr-1 inline-block" /> New Article
          </button>
        </div>
      )}

      {/* Modals */}
      {isAdmin && (
        <NewArticleModal
          open={showPostModal}
          onClose={() => setShowPostModal(false)}
          onCreate={(p) => setPosts((xs) => [p, ...xs])}
          categories={CATEGORIES}
          currentUser={user}
        />
      )}
      {isAdmin && (
        <NewPageModal
          open={showPageModal}
          onClose={() => setShowPageModal(false)}
          onCreate={(p) => {
            setMiniPages((mp) => {
              const next = [p, ...mp];
              localStorage.setItem("ahn-mini-pages", JSON.stringify(next));
              return next;
            });
          }}
        />
      )}

      <footer className="mt-10 border-t bg-white">
        <div className="container mx-auto px-4 py-8 text-sm text-gray-600">
          <div className="font-semibold">Enhance Your Adult Nursing Practice</div>
          <p className="mt-1">
            Join our community of nursing professionals and gain access to premium resources,
            personalized learning paths, and expert-led webinars.
          </p>
        </div>
      </footer>
    </div>
  );
}
